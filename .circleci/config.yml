version: 2
jobs:
  build:
    working_directory: ~/tipjar
    docker:
      # using custom image, see .circleci/images/primary/Dockerfile
      - image: tmaier/docker-compose
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build service
          command: docker-compose -f docker-compose.ci.yml build
      - run:
          name: Set up test environment
          command: docker-compose -f docker-compose.ci.yml run app rails db:setup
      - run:
          name: Rails Suite
          command: docker-compose -f docker-compose.ci.yml run app rails spec
      - run:
          name: JS Suites
          command: docker-compose -f docker-compose.ci.yml run app yarn test
      - run:
          name: Start container and verify it's working
          command: |
            set -x
            docker-compose -f docker-compose.ci.yml up -d

### Stuff left over from example. I'll probably have to deal with this come beploy time
      # docker-compose will start 2 containers, the one with service will be named `contacts`
          # we start another container with curl in the same network as `contacts`, this way we have
          # all exposed ports from `contacts` available on `localhost` in this new container
          # docker run --network container:contacts \
          #   appropriate/curl --retry 10 --retry-delay 1 --retry-connrefused http://localhost:8080/contacts/test
#     - deploy:
#         name: Build and push Docker image
#         command: |
#           TAG="0.1.${CIRCLE_BUILD_NUM}"
#           docker build -t circleci/cci-demo-docker:$TAG .
#           docker login -u $DOCKER_LOGIN -p $DOCKER_PASSWORD
#           docker push circleci/cci-demo-docker:$TAG
#     - store_artifacts:
#         path: /tmp/test-results
#         destination: raw-test-output

#     - store_test_results:
#         path: /tmp/test-results
